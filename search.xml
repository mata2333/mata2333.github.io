<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>查找算法</title>
      <link href="/2021/12/13/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/2021/12/13/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、顺序表查找"><a href="#1、顺序表查找" class="headerlink" title="1、顺序表查找"></a>1、顺序表查找</h2><h3 id="顺序表查找算法"><a href="#顺序表查找算法" class="headerlink" title="顺序表查找算法"></a>顺序表查找算法</h3><p>这个很简单，就是从下标0开始逐个比较，值相同就返回下标。。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Sequential_Search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="顺序表查找优化"><a href="#顺序表查找优化" class="headerlink" title="顺序表查找优化"></a>顺序表查找优化</h3><p>在上个算法里需要比较两次，分别是i &lt; n 和a[i]==key，很显然，i &lt; n的比较其实可以去掉，改进算法如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Sequential_Search2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//在创建数组时，这里创建的数组大小应该>=n+1</span><span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码虽然也比较了两次，但显然第二次不在循环内，只做了一次比较，所以几乎可以忽略。</p><p>以上两种比较的时间复杂度都是O(n)。所以需要一个更加高效的算法。</p><h2 id="有序表查找"><a href="#有序表查找" class="headerlink" title="有序表查找"></a>有序表查找</h2><h3 id="折半查找-二分查找"><a href="#折半查找-二分查找" class="headerlink" title="折半查找(二分查找)"></a>折半查找(二分查找)</h3><p>我们查字典也是一种二分查找，我们一般不会从a开始找，一直找到最后，而是先翻开中间的位置，看看是什么字母，如果需要找的字母在左边，那么就再往左翻一半，反之则往右，直到查找到了自己想要的字符。二分查找也是如此。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Binary_Search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>折半查找对比起线性查找必须要是有序的，但是在不重新插入的情况下，排序只需要排一次，查找却可以查很多次，且折半查找的时间复杂度为log(n)，远远好于O(n);</p><h3 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h3><p>我们现在设置一个大小为200000的数组，然后用rand()函数给他们设置从0~100000之间的数，然后在一个循环中查找1000000次，输出用时。(测试代码最后给出);</p><h4 id="顺序查找用时："><a href="#顺序查找用时：" class="headerlink" title="顺序查找用时："></a>顺序查找用时：</h4><p><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo/data/20211214155408.png"></p><h4 id="二分查找用时："><a href="#二分查找用时：" class="headerlink" title="二分查找用时："></a>二分查找用时：</h4><p><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo/data/20211214155438.png"><br><br>这效率差距就很大了，差了770多倍</p><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">InterpolationSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> <span class="token keyword">long</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>key <span class="token operator">-</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实就是把mid = (low + high) / 2 换成 mid = low + (high - low) * (key - a[low]) / (a[high] - a[low])，这样做目前有什么好处我还在研究。。反正经过我测试其效率反而降低了。。</p><h4 id="测试结果如下："><a href="#测试结果如下：" class="headerlink" title="测试结果如下："></a>测试结果如下：</h4><p>现在为了提升对比度，将循环次数提升到10000000次<br><br>二分查找：<br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo/data/20211214160347.png"><br><br>插值查找：<br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo/data/20211214160440.png"><br><br>经过随机出来的数据也都保持着平均水平，不会出现差值过大的情况，所以为什么速度反而慢了暂时未知😔</p><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter敏感词过滤器</title>
      <link href="/2021/12/10/Filter%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2021/12/10/Filter%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>创建好一个maven项目，然后将目录和包都创建好，以下是我的目录结构：<br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210223620.png"><br><br>constant包是用来放置常量类，常量类中存储着需要全局调用的常量。在这次作业中的作用是在项目开始阶段加载敏感词。<br><br>接下来在main目录下创建resources目录，并将其标记为资源文件夹<br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210224020.png"><br>在resources目录下创建sensitiveWords.txt文件，用来存放敏感词(其实一般resources文件夹是用来存放properties文件的，也就是配置文件，这里暂时放一下)<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210232455.png"><br></p><h2 id="敏感词设置与加载"><a href="#敏感词设置与加载" class="headerlink" title="敏感词设置与加载"></a>敏感词设置与加载</h2><p>接下来就是在Constant.class中做操作了，代码如下</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mata<span class="token punctuation">.</span>constant<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constant</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> sensitiveWords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\Program Files\\JavaWeb\\Project\\homework\\src\\main\\resources\\sensitiveWords.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//相关对象初始化</span>                InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>                String lineText <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//从sensitiveWords.txt中读取数据，每次读一行</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lineText <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 将一行的字符串分割为字符串数组</span>                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> lineText<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 将字符串数组加入sensitiveWords中</span>                    sensitiveWords<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                inputStreamReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"路径错误或者该文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码中有一个static代码块，意味在项目启动时加载（这不同于构造函数在实例化对象时加载），代码的主要部分已做注释，其作用主要是将所有敏感词加入到ArrayList全局变量中，以便后期调用<br><br><strong>ps</strong>：idea获取绝对路径的快捷办法:<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210233047.png"><br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210233106.png"><br></p><h2 id="准备jsp"><a href="#准备jsp" class="headerlink" title="准备jsp"></a>准备jsp</h2><p>接下来将jsp的内容准备好</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pageContext.request.contextPath}/hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="filter代码实现"><a href="#filter代码实现" class="headerlink" title="filter代码实现"></a>filter代码实现</h2><p>创建好这两个类：<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210233556.png"><br><br>过滤器filter书写注意事项：<br><br><strong>1、</strong> 引用的Filter接口一定要是tomcat包中的<br><br>如下，tomcat10引用的包是jakarta，tomcat9及以下则是javax，其他的Filter都不是我们需要的Filter<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210233912.png"><br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210233733.png"><br><br><strong>2、</strong> Filter中有三个函数是必须要重写的，我们按住ctrl+o选中这三个即可<br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210234106.png"><br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211210234126.png"><br><br><strong>接下来开始敲filter的代码</strong><br></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mata<span class="token punctuation">.</span>filter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mata<span class="token punctuation">.</span>constant<span class="token punctuation">.</span>Constant<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SensitiveWordFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        servletRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用string接收从前端传来的字符串</span>        String string <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> Constant<span class="token punctuation">.</span>sensitiveWords<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// String是final值，所以替换后必须替代为一个新的String</span>                string <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 因为parameter中的值无法修改，且重新创建一个request比较麻烦，所以我这里直接用attribute来set值，让servlet拿attribute</span>        servletRequest<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的思路很简单，就是将前端传来的值一一与敏感词列表中的词比较，如果有敏感词就将它替换掉，因为parameter中的参数无法修改，过滤器想要修改的话只能重新创建一个request请求，但是比较麻烦。我比较懒，所以决定将修改后，即屏蔽后的值在attribute中设置，然后servlet那边拿attribute值就可以了。<br></p><h2 id="servlet代码实现"><a href="#servlet代码实现" class="headerlink" title="servlet代码实现"></a>servlet代码实现</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mata<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>PrintWriter<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String string <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h3>"</span><span class="token operator">+</span>string<span class="token operator">+</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最终结果演示"><a href="#最终结果演示" class="headerlink" title="最终结果演示"></a>最终结果演示</h2><p><strong>敏感词我设置为以下两个</strong> §(<em>￣▽￣</em>)§<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211010430.png"><br><br>输入：<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211010543.png"><br><br>结果：<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211010641.png"><br></p><h2 id="后续，写完后发现和老师的要求不一样-〃＞目＜"><a href="#后续，写完后发现和老师的要求不一样-〃＞目＜" class="headerlink" title="后续，写完后发现和老师的要求不一样(〃＞目＜)"></a>后续，写完后发现和老师的要求不一样(〃＞目＜)</h2><p><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211010759.png"><br><br>修改filter中的doFilter代码：<br></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span>ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> throwsIOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>    servletRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span>servletRequest<span class="token punctuation">;</span>    HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span>servletResponse<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用string接收从前端传来的字符串</span>    String string <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> Constant<span class="token punctuation">.</span>sensitiveWords<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/error.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加error.jsp</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%@</span> <span class="token attr-name">page</span> <span class="token attr-name">contentType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span>            <span class="token attr-name">out.print("你输入了敏感词"+request.getAttribute("word"));</span>        <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果展示：<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211013656.png"><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211013708.png"></p><h2 id="小bug修复"><a href="#小bug修复" class="headerlink" title="小bug修复"></a>小bug修复</h2><p>如果输入的没有敏感词的话会出错，这里把servlet的doget函数改成下面这样就可以了。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        resp<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintWriter writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token operator">==</span>null<span class="token punctuation">)</span>            writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h3>"</span><span class="token operator">+</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            String string <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;h3>"</span><span class="token operator">+</span>string<span class="token operator">+</span><span class="token string">"&lt;/h3>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat 10 </tag>
            
            <tag> maven </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven项目的创建-tomcat10的bug</title>
      <link href="/2021/12/09/Tomcat10%20servlet%E6%97%A0%E6%B3%95%E5%AE%9E%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/"/>
      <url>/2021/12/09/Tomcat10%20servlet%E6%97%A0%E6%B3%95%E5%AE%9E%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>1、idea 2020 <br><br>2、maven 3.6.3<br><br>3、tomcat10 <br></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>tomcat 10更新后官方将javax包改名为jakarta，导致了idea无法找到包，解决方法如下</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在maven导包时不要导入javax包，将pom.xml的配置文件改为：</p><pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!--servlet依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jakarta.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jakarta.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jsp依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jakarta.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jakarta.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="以下是我目前使用的依赖"><a href="#以下是我目前使用的依赖" class="headerlink" title="以下是我目前使用的依赖"></a>以下是我目前使用的依赖</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>test06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-catalina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>10.1.0-M7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--HikariCP连接池--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--单元测试依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--servlet依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jakarta.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jakarta.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jsp依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jakarta.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jakarta.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--jstl依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jakarta.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--standard标签库--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--连接数据库--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.27<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于jdk17"><a href="#关于jdk17" class="headerlink" title="关于jdk17"></a>关于jdk17</h2><p>如果修改以上的信息还是无法实例化，或者实例化出错，那么有可能是jdk17的原因。过去在配置jdk的时候需要配置两个环境变量，JAVA_HOME和CLASSPATH。但是，如今的jdk17中不再需要CLASSPATH环境变量，将它删掉，再试试是否成功。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><strong>如果这样还是不行，在创建maven项目的时候记得勾选</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209170144.png" alt="20211209170144"><br><strong>注意版本一致</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209170526.png" alt="20211209170526"><br><strong>记得点这个</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209170623.png" alt="20211209170623"><br><strong>这样idea应该会自动创建一个web模块，不用手动导入web，但我的idea不知道为什么没有自动创建web模块，所以我还是手动添加框架支持的</strong> <br><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209170646.png" alt="20211209170646"><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209170706.png" alt="20211209170706"><br><strong>pom.xml中复制粘贴上述代码</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209172135.png" alt="20211209172135"><br><strong>导入之后记得刷新maven</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209172301.png" alt="20211209172301"><br><strong>然后创建src目录并创建一个HelloServlet类做试验</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209172448.png" alt="20211209172448"><br><strong>写上测试代码</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>mata<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Servlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest req<span class="token punctuation">,</span> HttpServletResponse resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置tomcat</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209172702.png" alt="20211209172702"><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209172754.png" alt="20211209172754"></p><p><strong>配置路由</strong></p><pre class="line-numbers language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.mata.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改路径，访问hello</strong><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209173013.png" alt="20211209173013"><br>控制台中输出Hello Servlet，配置成功<br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209173142.png" alt="20211209173142"></p><h2 id="还是不行"><a href="#还是不行" class="headerlink" title="还是不行"></a>还是不行</h2><p>如果根据以上还是不行，直接试试用我下载好的maven仓库<br><br><a href="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/maven-repo.zip">maven-repo</a><br><br><br><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209174655.png" alt="20211209174655"><br><br>找到仓库位置<br><br><img src="https://cdn.jsdelivr.net/gh/mata2333/PicGo@master/data/20211209174903.png" alt="20211209174903"><br><br><strong>把仓库里的东西全部删掉换成我的</strong></p><p><strong>如果还是不行，tomcat10也换成我的试试</strong><br><br><a href="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/apache-tomcat-10.0.13.zip">apache-tomcat-10.0.13</a><br></p><p><strong>最后如果还是不可以的话，只能建议换成tomcat9了（换了后记得依赖改成javax）。<br><br>或者自己重装一个maven，并配置好试试(建议maven用3.6.3，其他版本可能有问题)</strong></p>]]></content>
      
      
      <categories>
          
          <category> javaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat 10 </tag>
            
            <tag> maven </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习(二):makefile</title>
      <link href="/2021/12/08/Linux%E5%AD%A6%E4%B9%A0(%E4%BA%8C)%EF%BC%9Amakefile/"/>
      <url>/2021/12/08/Linux%E5%AD%A6%E4%B9%A0(%E4%BA%8C)%EF%BC%9Amakefile/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux学习（二）：makefile"><a href="#Linux学习（二）：makefile" class="headerlink" title="Linux学习（二）：makefile"></a>Linux学习（二）：makefile</h1><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>gcc 是用来编译代码的编译器<br><strong>编译完后有一些常见的输出文件：</strong><br>.a           静态库（文档）<br>.c           需要预处理的C语言源代码<br>.h           C语言源代码的头文件<br>.i             经过预处理后的C语言源代码<br>.o            目标文件（经过汇编产生）<br>.s            经过编译后产生的汇编语言代码</p><h3 id="gcc编译过程："><a href="#gcc编译过程：" class="headerlink" title="gcc编译过程："></a>gcc编译过程：</h3><p>首先对.c和.h文件进行预处理操作，生成.i文件，然后将其编译产生汇编语言代码.s，再对.s文件进行处理，生成目标文件.o，.o文件就是计算机能看懂，且可以执行的机器语言。</p><p>先创建文件写一个简单代码<br><img src="https://img-blog.csdnimg.cn/e0c4318ad98c45b7a7a3978a4e9f435c.png"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>预处理指令：</p><pre class="line-numbers language-bash"><code class="language-bash">gcc -E helloWorld.c -o helloWorld.i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后多出一个.i文件<br><img src="https://img-blog.csdnimg.cn/e97a1d6b52eb4945889e561a1b08f9f8.png"><br>再通过ls -l指令查看文件详细内容，可以看到文件的大小，在经过预处理后由59B变为16335B，翻了好几倍<br><img src="https://img-blog.csdnimg.cn/02585dd993a74502ae0e232724485854.png"><br>变大的原因：我们之前引用了头文件stdio.h，在执行预处理后，等同于将.h中的所有内容拷贝到了该文件，所以文件大小变大。</p><p>通过less helloWorld.i 可以查看该文件详细内容：<br><img src="https://img-blog.csdnimg.cn/c934f48d92e74c59b5a314f9c1bbfae4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="产生汇编"><a href="#产生汇编" class="headerlink" title="产生汇编"></a>产生汇编</h4><p>这里主要使用 -s 命令，可以看见下图能直接对.c 和 .i 文件进行操作，这是因为-s中已经集成了预处理操作<br><img src="https://img-blog.csdnimg.cn/0de7197b314e4bcdbe623f69382cb352.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h4><p>同理，-o同样集成了预处理和转为汇编的操作，因此可以直接对.c文件进行操作：<br><img src="https://img-blog.csdnimg.cn/0aa51824fbeb4cfd9ca48b5720cfa3ad.png"><br>我们再看文件的详细信息：<br><img src="https://img-blog.csdnimg.cn/22b434e488c24bda9d7b9d4a8e796d1e.png"><br>这里可以看到.o 文件要小于.s和.i文件，这是因为.o文件只是一个可执行文件，但是它不具备可执行的能力，.o文件是将汇编文件转为的机器码，也就是二进制文件。</p><h4 id="执行文件"><a href="#执行文件" class="headerlink" title="执行文件"></a>执行文件</h4><p>gcc可以直接读懂二进制.o文件，所以可以直接使用这种指令生成可执行文件：<code>gcc helloWorld.o -o myHello</code></p><p><img src="https://img-blog.csdnimg.cn/cf8fb0deb9e445eaad3a2e6cfb0378a0.png"><br>再看看myHello 的文件大小，再次变大，前面我们提到.o文件是可执行文件，但是不具备可执行能力。为了让它具备可执行能力，gcc需要在.o文件原来的基础上再添加一些配置，让它具备可执行文件。<br><img src="https://img-blog.csdnimg.cn/71fd87e810eb4431b09214e11540c8a9.png"></p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>可以看到，我们可以直接编译.c 生成可执行文件，那么，我们之前学的那些生成.i，.s，.o的过程有什么用呢。虽然现在的指令都集成好了，可以直接用，但是我们还是需要对这些过程做一些了解，因为c语言不同于java，Java是解释型语言，而c则是编译型语言，例如程序有时候出错可能不是错在.c文件，而是在其他文件中出了一些问题，所以这些基本性的内容仍然需要做一些了解。</p><p>此外，这种方法只试用于头文件为官方库的情况，如果用到了其他的库则这种一步会出错，遇到这种情况的做法到后面再说。<br><img src="https://img-blog.csdnimg.cn/e1dd0d8f010f4751af341dd90e074c48.png"></p><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><p><strong>概念</strong>：在我们使用gcc进行编译时，如果有很多个.c文件，那么我们就需要一条一条的输入指令，这样做太过麻烦，所以Makefile就应运而生。Makefile本质上就是一种脚本，帮我们简化了许多重复性的操作。</p><h3 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h3><p>首先准备好多个.c文件和.h文件，这里准备的是加减除三个函数，用c语言简单写一下就可以。<br><img src="https://img-blog.csdnimg.cn/095bb09380164588ae4886731bd2db20.png"><br>然后myProject.c中写的是主函数：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myadd.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mysub.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mymul.h"</span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">myAdd</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">mySub</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">myMul</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么，怎样将几个文件编译起来呢，具体操作如下所示：<br><img src="https://img-blog.csdnimg.cn/2e6ac9fea9374e21b59290c6695dab61.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>很显然，这样做的操作比较麻烦。需要执行很多指令，我们可以用makefile来进行操作。</p><h3 id="makefile-规则"><a href="#makefile-规则" class="headerlink" title="makefile 规则"></a>makefile 规则</h3><p>target:depend<br>command</p><p>target：目标，可以是一个中间文件，也可以是最终的执行文件<br>depend：依赖，指要生成目标文件所需要的文件或目标<br>command：make需要执行的命令</p><p>比如在这个指令中：</p><pre class="line-numbers language-bash"><code class="language-bash">gcc -c mymul.c -o mymul.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mymul.c为依赖，mymul.o为目标</p><p><strong>makefile 执行顺序：</strong> 默认执行第一条，在执行第一条时，先找所有的依赖文件，如果没有，继续往下找有没有脚本能生成这个依赖文件，如果有就会先执行下面生成依赖的语句，当需要的依赖齐全后再执行那个语句。<br><strong>事例：</strong></p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">test</span><span class="token punctuation">:</span>prog.o code.o        gcc -o test prog.o code.o<span class="token symbol">prog.o</span><span class="token punctuation">:</span>prog.c        gcc -c prog.c -o prog.o<span class="token symbol">code.o</span><span class="token punctuation">:</span>code.c        gcc -c code.c -o code.o<span class="token symbol">clean</span><span class="token punctuation">:</span>        rm -f *.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有第一条命令中需要的prog.o 和 code.o文件时，就先往下执行，通过编译.c 文件得到了prog.o和code.o文件，然后再执行第一条命令，就可以生成需要的test文件。</p><h3 id="简单的makefile实例"><a href="#简单的makefile实例" class="headerlink" title="简单的makefile实例"></a>简单的makefile实例</h3><p>写一个makefile文档：</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">myProject</span><span class="token punctuation">:</span> myProject.o myadd.o mysub.o mymul.o    gcc *.o -o myProject<span class="token symbol">myProject.o</span><span class="token punctuation">:</span> myProject.c    gcc -c myProject.c -o myProject.o<span class="token symbol">myadd.o</span><span class="token punctuation">:</span>myadd.c    gcc -c myadd.c -o myadd.o<span class="token symbol">mysub.o</span><span class="token punctuation">:</span>mysub.c    gcc -c mysub.c -o mysub.o<span class="token symbol">mymul.o</span><span class="token punctuation">:</span>mymul.c    gcc -c mymul.c -o mymul.o<span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f *.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图所示，写好makefile文件后，直接输入make就可以执行已经写好的指令，十分方便<br><img src="https://img-blog.csdnimg.cn/6826e043f3b24c9d86bf007f728c7d91.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>全部编译好后，如果想要清除掉没用的文件，如.o文件，可以使用在makefile中写好的文件make clean。</p><h3 id="makefile变量和通配符"><a href="#makefile变量和通配符" class="headerlink" title="makefile变量和通配符"></a>makefile变量和通配符</h3><p><strong>变量理解为字符串</strong><br>OBJ = a b c —— 表示OBJ就是a b c 这三个，不能改变了<br>OBJ := a b c —— 表示OBJ是a b c 但可以用+=再去追加<br>OBJ += a b c —— 表示OBJ变量添加了d这一个变量<br><strong>变量引用：</strong><br>$(变量名)<br><strong>通配符：</strong><br>% —— 表示任意一个<br>* —— 表示所有<br>？—— 表示匹配一个未知的东西</p><p>所以，原来的代码就可以进化成这样了：</p><pre class="line-numbers language-makefile"><code class="language-makefile">OBJ<span class="token operator">:=</span>myadd.o mysub.o mymul.oOBJ<span class="token operator">+=</span>myProject.o<span class="token symbol">myProject</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span>    gcc <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span> -o myProject<span class="token symbol">*.o</span><span class="token punctuation">:</span>*.c    gcc -c *.c -o *.o<span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f *.o myProject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见代码更加简洁，且后续修改也更加方便，但是还可以更加简洁。</p><p>$@ —— 表示目标文件<br>$^ —— 表示依赖文件</p><p>代码再次进化：</p><pre class="line-numbers language-makefile"><code class="language-makefile">target<span class="token operator">=</span>myProjectOBJ<span class="token operator">:=</span>myadd.o mysub.o mymul.oOBJ<span class="token operator">+=</span>myProject.oCC<span class="token operator">:=</span>gccCFLAGS<span class="token operator">:=</span>-c<span class="token symbol"><span class="token variable">$</span>(target)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span>    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span><span class="token symbol">*.o</span><span class="token punctuation">:</span>*.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span><span class="token symbol">clean</span><span class="token punctuation">:</span>    rm -f *.o <span class="token variable">$</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样后续修改直接改变量就可以了，非常方便</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言位运算</title>
      <link href="/2021/12/08/c%E8%AF%AD%E8%A8%80%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2021/12/08/c%E8%AF%AD%E8%A8%80%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="c语言位运算"><a href="#c语言位运算" class="headerlink" title="c语言位运算"></a>c语言位运算</h2><p><strong>如果有错误出现，欢迎指出</strong></p><p>此内容知识和图片来源：<a href="https://www.bilibili.com/video/BV1pN411Q7et?from=search&amp;seid=13105223701786752559&amp;spm_id_from=333.337.0.0">https://www.bilibili.com/video/BV1pN411Q7et?from=search&amp;seid=13105223701786752559&amp;spm_id_from=333.337.0.0</a></p><p><strong>如图所示为&amp;位运算，其运算过程为全1为1，有0出0，如图所示中a&amp;b=十进制中的2和二进制中的0010</strong></p><p><img src="https://img-blog.csdnimg.cn/bfe5d59fed174b1a9629ae7d59cff2dd.png?type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>如图所示为|运算，有1出1，全0为0</strong><br><img src="https://img-blog.csdnimg.cn/7a4ad2df13fa47f18415a9ced3480bd4.png?type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>如图为异或运算，两个数相同则为0，但是一个非0的数与0的异或结果为该数字本身</strong></p><p><img src="https://img-blog.csdnimg.cn/32e0a3ab5d814f9897985d4fbfca52f0.png?type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_19,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>如图为按位取反运算</strong></p><p><img src="https://img-blog.csdnimg.cn/31d95d15af3741a987a169dc095438c3.png?type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>如图为左移运算，将二进制向左移动指定的位数然后丢弃，后面用0补上，实际上，指定的左移数就是指定原数乘以几个2</strong></p><p><img src="https://img-blog.csdnimg.cn/42eb93a39ed24cf1b345e1c1e5ab8629.png?type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><strong>右移与左移同理，只是指定右移几位，就是除以几个2</strong></p><p><img src="https://img-blog.csdnimg.cn/0df023013695476493186e252b750821.png?type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习(一):文件操作</title>
      <link href="/2021/12/08/Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/12/08/Linux%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux学习（一）：文件操作"><a href="#Linux学习（一）：文件操作" class="headerlink" title="Linux学习（一）：文件操作"></a>Linux学习（一）：文件操作</h1><h2 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h2><p>不想看也可以直接调到文件操作部分</p><h3 id="1、虚拟文件系统"><a href="#1、虚拟文件系统" class="headerlink" title="1、虚拟文件系统"></a>1、虚拟文件系统</h3><p>在学习Linux文件操作之前，我们需要对VFS有一个大概的了解</p><p>VFS（Virtual Filesystem Switch）：虚拟文件系统或虚拟文件系统转换</p><p>VFS称为内核的子系统，VFS提供一个统一的接口，一个具体文件系统想要被Linux支持，就必须按照这个接口编写自己的操作函数，并且将自己的细节对内核其他子系统隐藏起来。</p><h3 id="2、VFS主要作用"><a href="#2、VFS主要作用" class="headerlink" title="2、VFS主要作用"></a>2、VFS主要作用</h3><p>a)支持多种具体文件系统之间的相互访问；</p><p>b)接受用户层的系统调用，比如open，link，write等；</p><p>c)对具体文件系统的数据结构进行抽象，以一种统一的数据结构进行管理</p><p>d)接受内核其他子系统的操作请示</p><h3 id="3、Linux系统当中文件系统逻辑关系架构"><a href="#3、Linux系统当中文件系统逻辑关系架构" class="headerlink" title="3、Linux系统当中文件系统逻辑关系架构"></a>3、Linux系统当中文件系统逻辑关系架构</h3><p><img src="https://img-blog.csdnimg.cn/994dbd3be529444ea0ac443cf8c4b28d.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h3 id="4、VFS在实际系统调用常用操作"><a href="#4、VFS在实际系统调用常用操作" class="headerlink" title="4、VFS在实际系统调用常用操作"></a>4、VFS在实际系统调用常用操作</h3><p>mount()/umount(),  sysfs(),  chroot(),  chdir()/fchdir()/getcwd(),  mkdir()/rmdir(),  readlink()/symlink(),  chown()/fchown()/lchown, select()/poll(),  flock()。</p><h3 id="5、VFS核心数据结构（对象）"><a href="#5、VFS核心数据结构（对象）" class="headerlink" title="5、VFS核心数据结构（对象）"></a>5、VFS核心数据结构（对象）</h3><p>a) 超级块（superblock）对象————每一个文件系统都有一个超级块对象</p><p>b) 索引节点（inode）对象————每一个文件都有一个索引节点对象，每一个索引节点对象都有一个索引节点编号，这个编号唯一可以标识某一个文件系统当中指定的文件</p><p>c) 目录项（dentry）对象</p><p>d) 文件（file）对象</p><h3 id="当前学习阶段了解这么多应该就够了，后续的内容还没有接触到"><a href="#当前学习阶段了解这么多应该就够了，后续的内容还没有接触到" class="headerlink" title="当前学习阶段了解这么多应该就够了，后续的内容还没有接触到"></a><em><strong>当前学习阶段了解这么多应该就够了，后续的内容还没有接触到</strong></em></h3><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文件信息查看"><a href="#文件信息查看" class="headerlink" title="文件信息查看"></a>文件信息查看</h3><p>查看文件详细信息的指令——stat filename</p><p><img src="https://img-blog.csdnimg.cn/7a35015644fd4f5ab07d013bda140791.png" alt="请添加图片描述"></p><p>如图所示，查看当前目录的文件信息</p><p><strong>大小：</strong> 在Linux中一切皆文件，因此目录也是文件，也有大小，在这里，该目录的大小为4096，<strong>注意</strong>这里的大小不是这个文件的容量大小，如果需要查看文件或者文件夹的大小，需要用到du -sh命令<br><img src="https://img-blog.csdnimg.cn/84258509c6474323bdd305e2b12dafeb.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_19,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。所以这里的大小并不是文件容量的大小</p><p><strong>块：</strong> 硬盘的最小存储单位叫做“扇区”（Sector）。每个扇区储存512字节（相当于0.5KB）。“块”的大小，最常见的是4KB，即<strong>连续八个 sector组成一个 block</strong>。</p><p><strong>设备：</strong> 设备编号。</p><p><strong>Inode：</strong> Inode编号，所有文件都对应有一个Inode编号。</p><p><strong>硬链接：</strong> 硬链接数，就是有多少种方式，可以访问到当前目录或者文件。文件的硬链接数一般是1（绝对路径）。目录的硬链接数至少是2（绝对路径或者cd .），目录包含的子目录越多硬链接数越多（子目录下进去上级cd ..）。</p><p><strong>权限：</strong> 以(0664/-rw-rw-r–)为例，先看后面-rw-rw-r–中分为四组，分别为-  rw-  rw-  r–  。第一组，代表文件类型，比如说目录的第一组为d，意为directory，目录，第二组代表用户权限，第三组代表用户所属组权限，第四组代表其他权限。后三组主要有三个权限内容，分别是r  w  x，意为可读，可写，可执行。前面的数字是后面权限的一种表示方式。r代表4，w代表2，x代表1  所以4为r–，5为r-x，6为rw-，7为rwx，以此类推。</p><h3 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h3><p>首先可以使用ls -l 查看权限<br><img src="https://img-blog.csdnimg.cn/9e90823866d240128b47b0acd6316e31.png"></p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>如图所示，使用ls -查看123.txt的文件权限可以看出权限为 -rw-rw-r–, 接下来，我们可以使用<strong>chmod</strong>修改文件的权限。<br>首先，使用chmod前缀，然后的格式为  修改对象 +/- 对应的权限，+为允许该权限，-为禁止该权限，请看以下案例：<br><img src="https://img-blog.csdnimg.cn/f478f937fbf54818bae38dffee72ece5.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>在这里 u代表user即用户，所以这里的u-w指的是禁止用户的写入权限，而给予用户写入权限可以用u+w。<br>u—-用户，g—-所属组，o—-其他，a—-所有身份。w—-写入，r—-读取，x—-执行。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p><img src="https://img-blog.csdnimg.cn/e145fb532bb54dcd8c49101def8805ce.png"><br>如图所示，123.txt 文件已经没有任何权限，现在我们想要给用户添加可读和可执行的权限，除了方法一之外还有什么方法呢。我们可以不用chmod u+r 123.txt; chmod u+x 123.txt。而是采取覆盖权限的方法。<br>如图所示，<br><img src="https://img-blog.csdnimg.cn/5385f5edbcca410287147e87c05d11bb.png"><br>可见，u=rx 的意思为用户的权限被r-x覆盖。</p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>r—-4，w—-2，x—-1。请记住三个权限所对应的数字<br>所以有：<br>0对应—<br>1对应–x<br>2对应-w-<br>3对应-wx<br>4对应r–<br>5对应r-x<br>6对应rw-<br>7对应rwx<br>由此可以看出，三个权限的排列组合一共有8个，于是我们可以用这些数字来表示所有权限<br>现在，我们有一个没有任何权限的文件123.txt<br><img src="https://img-blog.csdnimg.cn/353b8364863d4497a82c791bfef2116f.png"><br>现在我们想要为它的用户加上可读权限，给它的所属组添加可读可写权限，给它的其他添加所有权限<br>所以现在有  chmod 467 123.txt<br><img src="https://img-blog.csdnimg.cn/a212b9b358cb4edea4a50816e811c94a.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>这便是数字法修改权限</p><h3 id="c语言查询文件权限"><a href="#c语言查询文件权限" class="headerlink" title="c语言查询文件权限"></a>c语言查询文件权限</h3><p>我们也可以用c语言的代码来实现查询权限：</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u32<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u32 i<span class="token punctuation">,</span> mask <span class="token operator">=</span> <span class="token number">0700</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> stat fileAttribute<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>filePermissions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"---"</span><span class="token punctuation">,</span> <span class="token string">"--x"</span><span class="token punctuation">,</span> <span class="token string">"-w-"</span><span class="token punctuation">,</span> <span class="token string">"-wx"</span><span class="token punctuation">,</span> <span class="token string">"r--"</span><span class="token punctuation">,</span> <span class="token string">"r-x"</span><span class="token punctuation">,</span> <span class="token string">"rw-"</span><span class="token punctuation">,</span> <span class="token string">"rwx"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fileAttribute<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s的权限为："</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3s"</span><span class="token punctuation">,</span> filePermissions<span class="token punctuation">[</span><span class="token punctuation">(</span>fileAttribute<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mask <span class="token operator">>>=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入需要查询的文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译指令:</p><pre class="line-numbers language-bash"><code class="language-bash">gcc -g filename.c -o filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如图所示：<br><img src="https://img-blog.csdnimg.cn/b4c1576e52e147a2a8b39a5f3dcde3a8.png"></p><h4 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h4><p>在解析之前，需要了解C语言位运算的一些知识，详细可见<a href="https://blog.csdn.net/m7789456/article/details/120351863">C语言位运算</a><br>这里不做赘述</p><p>main函数中的参数argc和argv是什么意思可以参考这个视频<br><a href="https://www.bilibili.com/video/BV1Nx411D7R7?from=search&seid=17402910508511669946&spm_id_from=333.337.0.0">main函数中的参数</a></p><p> fileAttribute.st_mode  —— 代表文件权限 ，如果已经理解上面修改权限的第三种方法，那么应该可以知道，其实在该属性之中权限便是以数字的形式存储。注意在该代码中使用了mask=0700，和mask&gt;&gt;=3操作所以每次的权限对比，都是和7在进行与运算。</p><p>我们逐行分析代码中的for循环部分：<br>首先看第一个循环，即i=3时。<br>fileAttribute.st_mode &amp; mask具体是什么意思呢<br>我们以一个文件为例子，假设该文件的权限为rw- r– -wx<br>那么有<br>| fileAttribute.st_mode: | 6   | 4   | 3   |<br>| ———————- | — | — | — ||<br>| mask:                  | 7   | 0   | 0   |<br>如果你已经知道了位与运算的含义，那么应该清除，6和7的位与运算是先将它们转换为二进制再进行比较。<br>首先看6和7，就是110和111，比较后最终结果仍然是110，然后看后续的比较，可知全部为000。<br>比较过后的结果为110000000，然后再进行右移操作，右移六位，可以得到110。也就是6，filePermissions数组的下标为6时就是rw-。<br>然后mask右移3位，原来的700变为70。再继续同样的操作，直至i=0时。</p><h3 id="c语言查看文件的其他信息"><a href="#c语言查看文件的其他信息" class="headerlink" title="c语言查看文件的其他信息"></a>c语言查看文件的其他信息</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> u32<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    u32 i<span class="token punctuation">,</span> mask <span class="token operator">=</span> <span class="token number">0777</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> stat fileAttribute<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>filePermissions<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"---"</span><span class="token punctuation">,</span> <span class="token string">"--x"</span><span class="token punctuation">,</span> <span class="token string">"-w-"</span><span class="token punctuation">,</span> <span class="token string">"-wx"</span><span class="token punctuation">,</span> <span class="token string">"r--"</span><span class="token punctuation">,</span> <span class="token string">"r-x"</span><span class="token punctuation">,</span> <span class="token string">"rw-"</span><span class="token punctuation">,</span> <span class="token string">"rwx"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fileAttribute<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s的权限为："</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3s"</span><span class="token punctuation">,</span> filePermissions<span class="token punctuation">[</span><span class="token punctuation">(</span>fileAttribute<span class="token punctuation">.</span>st_mode <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mask <span class="token operator">>>=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> <span class="token operator">*</span>fileType<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISREG</span><span class="token punctuation">(</span>fileAttribute<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 判断是否为普通文件</span>                fileType <span class="token operator">=</span> <span class="token string">"regular file"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISDIR</span><span class="token punctuation">(</span>fileAttribute<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 目录文件</span>                fileType <span class="token operator">=</span> <span class="token string">"directory file"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISFIFO</span><span class="token punctuation">(</span>fileAttribute<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 管道文件</span>                fileType <span class="token operator">=</span> <span class="token string">"fifo file"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">S_ISCHR</span><span class="token punctuation">(</span>fileAttribute<span class="token punctuation">.</span>st_mode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 字符设备文件</span>                fileType <span class="token operator">=</span> <span class="token string">"character file"</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件类型：%s\n"</span><span class="token punctuation">,</span> fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"大小：%ld\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"块：%ld\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_blocks<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"块大小：%ld\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_blksize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"设备：%ld\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_dev<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"inode：%ld\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_ino<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"硬链接数：%ld\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_nlink<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"uid：%d\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_uid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"gid：%d\n"</span><span class="token punctuation">,</span> fileAttribute<span class="token punctuation">.</span>st_gid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入需要查询的文件\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要记住里面参数，结构体成员和相应的函数。</strong></p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h4 id="文件名查找"><a href="#文件名查找" class="headerlink" title="文件名查找"></a>文件名查找</h4><p>格式：find 查找目录 -name 文件名<br><img src="https://img-blog.csdnimg.cn/441c33f6084b4471b4586627d605d921.png"><br>如图所示，在FindRoute目录下有两个txt文件和两个.c文件，现在我们在Linux目录下找到FindRoute中的123.txt，过程与结果见下图<br><img src="https://img-blog.csdnimg.cn/27e643f35fcf40cfaa079396ebecd5eb.png"><br>同理，我们再找到所有.c文件，在使用*通配符时需要用\进行转义<br><img src="https://img-blog.csdnimg.cn/7fcdb9e16f39475995f01035d67c6fac.png"><br>查找以0到9开头的文件<br><img src="https://img-blog.csdnimg.cn/a07c1b3b68384bf08c9878afaf0f1763.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h4 id="文件大小查找"><a href="#文件大小查找" class="headerlink" title="文件大小查找"></a>文件大小查找</h4><p>查找当前目录大于5k的文件<br><img src="https://img-blog.csdnimg.cn/98e3c35797484ebba38d14f426327785.png"><br>查找当前目录下大于5k 小于 2M的文件<br><img src="https://img-blog.csdnimg.cn/4c7e9044cb924b2e9d3527d2eabdf447.png"></p><h4 id="文件类型查找"><a href="#文件类型查找" class="headerlink" title="文件类型查找"></a>文件类型查找</h4><p>查找当前目录下所有普通文件<br><img src="https://img-blog.csdnimg.cn/feba56b229ee48efa9cc5e0808bacc5c.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_18,color_FFFFFF,t_70,g_se,x_16"><br>查找当前目录下所有目录文件<br><img src="https://img-blog.csdnimg.cn/0ad69621edc944e28852977d84f4ac79.png"></p><h4 id="按照文件内容查找"><a href="#按照文件内容查找" class="headerlink" title="按照文件内容查找"></a>按照文件内容查找</h4><p>先前已经在FindRoute文件夹中的2.c 和 3.c 中分别写入了222222和333333<br>我们在FindRoute的上级目录中按照这两个文件的内容查找<br><img src="https://img-blog.csdnimg.cn/48a5a7efa7de4e1db07bad926616d7e3.png"><br>查找当前目录下包含字符串“#include”的文件<br><img src="https://img-blog.csdnimg.cn/9f391fddebe747feac247636a626e8e4.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_18,color_FFFFFF,t_70,g_se,x_16"></p><h3 id="文件压缩和解压"><a href="#文件压缩和解压" class="headerlink" title="文件压缩和解压"></a>文件压缩和解压</h3><p><img src="https://img-blog.csdnimg.cn/2f4013c5a960439f8346a21fe25433e6.png"></p><h4 id="gzip压缩gunzip解压"><a href="#gzip压缩gunzip解压" class="headerlink" title="gzip压缩gunzip解压"></a>gzip压缩gunzip解压</h4><p>可见在当前目录下有两个文件夹（蓝色）一个可执行文件（绿色）以及一个普通文件（白色）.<br>现在我们将白色文件压缩<br><img src="https://img-blog.csdnimg.cn/dc37ad5b24d24988928113b6697265aa.png"><br>这个红色文件就是压缩后的文件，可以看到，压缩后，原文件消失，保留原文件的压缩方式接下来再说，我们先看看如何解压该文件<br>通过gunzip命令解压<br><img src="https://img-blog.csdnimg.cn/bbefe9f1e233408181d4621205412f88.png"></p><h4 id="bzip2压缩bunzip2解压"><a href="#bzip2压缩bunzip2解压" class="headerlink" title="bzip2压缩bunzip2解压"></a>bzip2压缩bunzip2解压</h4><p><img src="https://img-blog.csdnimg.cn/5e2d03e787a444dfa2fd767b6a3fa9aa.png"></p><h4 id="使用zip压缩解压"><a href="#使用zip压缩解压" class="headerlink" title="使用zip压缩解压"></a>使用zip压缩解压</h4><p><img src="https://img-blog.csdnimg.cn/ff50d372991c4a758577ff7df14783f7.png"><br>如图，将myStat和permission.c文件压缩在一起，且原文件<strong>没有被删除</strong><br><img src="https://img-blog.csdnimg.cn/d22952887b9142adbc3e0b14061ce516.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>再将其解压缩<br><img src="https://img-blog.csdnimg.cn/1eab5414ecf1495f8df2fb6b6637d20a.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"><br>这里因为原文件没有被删除，所以会问一下是否替换原文件或者重命名。</p><h3 id="文件操作缓冲区"><a href="#文件操作缓冲区" class="headerlink" title="文件操作缓冲区"></a>文件操作缓冲区</h3><p>标准输入：stdin   —— 句柄 0<br>标准输出：stdout —— 句柄 1<br>标准错误：stderr  —— 句柄 2</p><p>这里的句柄就是整数，不用想的太复杂。这种句柄通过VFS可以找到对应的文件，指向以上的几种操作。</p><h4 id="什么是缓冲区"><a href="#什么是缓冲区" class="headerlink" title="什么是缓冲区"></a>什么是缓冲区</h4><p>计算机在执行输入输出的过程中，通常是先把数据存在内存中，然后再直接从内存中取数据，这样减少了对硬盘的直接操作，提升了计算机处理速率。</p><p><strong>做个比喻：</strong> 现在有生产商和购买者。购买者到生产商那里去买商品，但是购买者的购买速度远大于生产商的生产速度，这样就会出现供不应求的现象。其实在这里可以看出，生产商对应计算机中的低速设备（硬盘之类的），购买商对应计算机中的高速设备（CPU之类的），而高速设备与低速设备之间的不匹配会造成计算机性能无法被完全释放，所以仓库（内存）应运而生，购买商在买不到商品时可以先去买其他商品，然后生产商赶紧生产放在仓库中，然后等下次购买商来到时快速购买。</p><p>这个比喻如果有些不合适的地方，希望知道的人可以帮忙指出。但是缓冲区的大致意思就是在输入输出设备之间，用来存储数据，使得高速设备和低速设备之间可以充分配合，发挥出最佳性能。</p><h4 id="三种缓冲区"><a href="#三种缓冲区" class="headerlink" title="三种缓冲区"></a>三种缓冲区</h4><p>缓冲区有三个典型：<br><strong>1、全缓冲</strong><br>典型代表：对磁盘文件的读写<br><strong>2、行缓冲</strong><br>典型代表：标准输入和标准输出<br><strong>3、无缓冲</strong><br>典型代表：标准错误</p><h4 id="c语言设置缓冲区"><a href="#c语言设置缓冲区" class="headerlink" title="c语言设置缓冲区"></a>c语言设置缓冲区</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><p>代码逻辑比较简单，且注释中已经有解释，因此不做赘述</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span> </span><span class="token comment" spellcheck="true">//标准错误相关函数</span><span class="token comment" spellcheck="true">// setbuf(FILE *stream, char* buf); 写入到参数1的输出在参数2的缓冲区中，当参数2的缓冲区满或fflush时，参数2的内容才会写入参数1中</span><span class="token comment" spellcheck="true">// setvbuf(FILE *stream, char* buf, int mode, size_t size); mode指代三种缓冲区，size指代缓冲区大小</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    FILE <span class="token operator">*</span>pf<span class="token punctuation">;</span>    <span class="token keyword">char</span> msg1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello world\n"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> msg2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello\nworld"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//==============================================================================================================</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空缓冲区buff</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"no_buf1.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"file open failure!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setbuf</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 设置无缓冲</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将msg1的内容写入pf中，写8个字符，写1次</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test setbuff(no buff)! check no_buf1.txt\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now buff data is : %s \n"</span><span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter the enter to continue!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//==============================================================================================================</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空缓冲区buff</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"no_buf2.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"file open failure!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1: 期望缓冲区的文件指针。2：缓冲区的地址。3、缓冲区的类型。4、缓冲区大小</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>msg1<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 将msg1的内容写入pf中，写8个字符，写1次</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test setbuff(no buff)! check no_buf2.txt\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now buff data is : %s \n"</span><span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter the enter to continue!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//===============================================================================================================</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空缓冲区buff</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"l_buf.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"file open failure!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1: 期望缓冲区的文件指针。2：缓冲区的地址。3、缓冲区的类型。4、缓冲区大小</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>msg2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将msg1的内容写入pf中，写8个字符，写1次</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test setbuff(line buff)! check l_buf.txt\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now buff data is : %s \n"</span><span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter the enter to continue!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//===============================================================================================================</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空缓冲区buff</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pf <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"f_buf.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"file open failure!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setvbuf</span><span class="token punctuation">(</span>pf<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> _IOFBF<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1: 期望缓冲区的文件指针。2：缓冲区的地址。3、缓冲区的类型。4、缓冲区大小</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span>msg2<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将msg1的内容写入pf中，写8个字符，写1次</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test setbuff(full buff)! check f_buf.txt\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now buff data is : %s \n"</span><span class="token punctuation">,</span> buff<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"enter the enter to continue!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//===============================================================================================================</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行结果分析"><a href="#运行结果分析" class="headerlink" title="运行结果分析"></a>运行结果分析</h5><p>我们先一步一步来看<br>打开两个终端，一个运行代码，一个查看创建的<br><img src="https://img-blog.csdnimg.cn/df5a063412be42eb8f1ce1eb21fe40be.png"><br>因为没有缓冲区，所以输出的内容直接写入到no_buf1.txt中<br><strong>注意：</strong>这里的world没有显示完全，是因为之前设置中只设置写入8个字符。<br><img src="https://img-blog.csdnimg.cn/dfa312fa715e4c1cb7a7394ecd96785f.png"><br>第二次运行结果和第一次一样，因为都没有设置缓冲区<br><img src="https://img-blog.csdnimg.cn/c1ffae500c0c447a9bd0f5b43329641a.png"><br>第三次运行结果和第一次不再一样，只输出了一个hello<br>在分析原因之前我们先看看msg2的内容：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> msg2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello\nworld"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以看出hello后面就是一个换行符\n，而行换行符刷新缓冲区，输出到设备中的条件就是换行，所以一开始hello都一直在缓冲区中，直到遇到换行符时，缓冲区刷新，输出到l_buf.txt中。</p><p>因此，当我们再次运行，程序执行到fclose时，缓冲区再次刷新，此时helloworld应该全部输出，我们再摁下enter时，可以看到：<br><img src="https://img-blog.csdnimg.cn/025ef5256c9a4ab98bae339fd8c740db.png"><br>果然，helloworld全部写入l_buf.txt中<br>但是我们再查看f_buf.txt中的内容<br><img src="https://img-blog.csdnimg.cn/5d4eec74c19b4132b07d6cde094dcaf0.png"><br>可以发现内容为空，这是因为第四步我们设置的是全缓冲区，不手动刷新缓冲区，它就一直只存在于缓冲区内，不会写入到f_buf文件中。我们再次摁下enter键时，代码执行到fclose函数，缓冲区刷新，此时缓冲区中的内容已经完全写入f_buf中：<br><img src="https://img-blog.csdnimg.cn/3e5a43d43d424a488e94242c07d166bb.png?x-oss-process=image,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6ams6LiP6aOe54eVMjMzMw==,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>ps:</strong> 除了fclose，可以使用fflush函数刷新缓冲区。</p><p>通过这段代码，可以对三种缓冲区有一个大致的了解</p><p><strong>本人也只是初学，如果有些地方有问题，欢迎各位指出</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2021/12/08/%E5%9B%BE/"/>
      <url>/2021/12/08/%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="图-无向-有向-的邻接矩阵存储和邻接表存储功能实现"><a href="#图-无向-有向-的邻接矩阵存储和邻接表存储功能实现" class="headerlink" title="图(无向+有向)的邻接矩阵存储和邻接表存储功能实现"></a>图(无向+有向)的邻接矩阵存储和邻接表存储功能实现</h2><h2 id="图的深度优先和广度优先遍历图功能实现"><a href="#图的深度优先和广度优先遍历图功能实现" class="headerlink" title="图的深度优先和广度优先遍历图功能实现"></a>图的深度优先和广度优先遍历图功能实现</h2><h2 id="邻接矩阵打印整个矩阵，邻接表打印整个表"><a href="#邻接矩阵打印整个矩阵，邻接表打印整个表" class="headerlink" title="邻接矩阵打印整个矩阵，邻接表打印整个表"></a>邻接矩阵打印整个矩阵，邻接表打印整个表</h2><p><strong>广度优先遍历需要用到队列，队列的简单封装如下:</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> QUEUEMAX 1000</span>class Queue<span class="token punctuation">{</span>private<span class="token punctuation">:</span><span class="token keyword">int</span> data<span class="token punctuation">[</span>QUEUEMAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> front<span class="token punctuation">;</span><span class="token keyword">int</span> rear<span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span>public<span class="token punctuation">:</span><span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>front <span class="token operator">=</span> rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> QUEUEMAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列已满\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">++</span>rear <span class="token operator">%</span><span class="token operator">=</span> QUEUEMAX<span class="token punctuation">;</span>size<span class="token operator">++</span><span class="token punctuation">;</span>data<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"队列为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">++</span>front <span class="token operator">%</span><span class="token operator">=</span> QUEUEMAX<span class="token punctuation">;</span>i <span class="token operator">=</span> data<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">"queue.h"</span></span><span class="token keyword">typedef</span> <span class="token keyword">char</span> VertexType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> EdgeType<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXVEX 100</span><span class="token macro property">#<span class="token directive keyword">define</span> INFINITY 65535</span><span class="token keyword">int</span> visited<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>VertexType vexs<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>EdgeType arc<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表示权值</span><span class="token keyword">int</span> map<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 表示是否连通0 1</span> <span class="token keyword">int</span> numVertexes<span class="token punctuation">,</span> numEdges<span class="token punctuation">;</span><span class="token punctuation">}</span>MGraph<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 边节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> GraphEdge<span class="token punctuation">{</span><span class="token keyword">int</span> adjvex<span class="token punctuation">;</span><span class="token keyword">int</span> weight<span class="token punctuation">;</span>GraphEdge<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 顶点节点</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token keyword">char</span> data<span class="token punctuation">;</span>GraphEdge<span class="token operator">*</span> firstedge<span class="token punctuation">;</span><span class="token punctuation">}</span>Vertex<span class="token punctuation">[</span>MAXVEX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 邻接表管理结构体</span><span class="token keyword">struct</span> GraphManager<span class="token punctuation">{</span>Vertex v<span class="token punctuation">;</span><span class="token keyword">int</span> numVertex<span class="token punctuation">,</span> numEdge<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 邻接矩阵存储有向图</span><span class="token keyword">void</span> <span class="token function">createDirectedMGraph</span><span class="token punctuation">(</span>MGraph<span class="token operator">&amp;</span> graph<span class="token punctuation">)</span><span class="token punctuation">{</span>VertexType v<span class="token punctuation">;</span>EdgeType vi<span class="token punctuation">,</span> vj<span class="token punctuation">,</span> val<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一共有多少顶点，多少条边: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>graph<span class="token punctuation">.</span>numVertexes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入每个顶点名称: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 确定所有顶点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化map</span><span class="token function">memset</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>map<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将所有边的权值赋为最大</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>graph<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 依次输入边的权值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请分别输入两个顶点的下标以及它们连线的权值: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vi<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vj<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>vj<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>graph<span class="token punctuation">.</span>map<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>vj<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接矩阵存储无向图</span><span class="token keyword">void</span> <span class="token function">createUnDirectedMGraph</span><span class="token punctuation">(</span>MGraph<span class="token operator">&amp;</span> graph<span class="token punctuation">)</span><span class="token punctuation">{</span>VertexType v<span class="token punctuation">;</span>EdgeType vi<span class="token punctuation">,</span> vj<span class="token punctuation">,</span> val<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入一共有多少顶点，多少条边: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>graph<span class="token punctuation">.</span>numVertexes<span class="token punctuation">,</span> <span class="token operator">&amp;</span>graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入每个顶点名称: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 确定所有顶点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 初始化map</span><span class="token function">memset</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>map<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>graph<span class="token punctuation">.</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将所有边的权值赋为最大</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>graph<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> INFINITY<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 依次输入边的权值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请分别输入两个顶点的下标以及它们连线的权值: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>vi<span class="token punctuation">,</span> <span class="token operator">&amp;</span>vj<span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>graph<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>vj<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>graph<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>vj<span class="token punctuation">]</span><span class="token punctuation">[</span>vi<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>graph<span class="token punctuation">.</span>map<span class="token punctuation">[</span>vi<span class="token punctuation">]</span><span class="token punctuation">[</span>vj<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>graph<span class="token punctuation">.</span>map<span class="token punctuation">[</span>vj<span class="token punctuation">]</span><span class="token punctuation">[</span>vi<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历邻接矩阵(遍历带权邻接表)</span><span class="token keyword">void</span> <span class="token function">printGraphWeight</span><span class="token punctuation">(</span>MGraph gra<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gra<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> gra<span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> gra<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历是否连通的邻接表</span><span class="token keyword">void</span> <span class="token function">printConnectedGraph</span><span class="token punctuation">(</span>MGraph gra<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gra<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> gra<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> gra<span class="token punctuation">.</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接表边节点创建</span><span class="token keyword">void</span> <span class="token function">makeGraphEdge</span><span class="token punctuation">(</span>GraphEdge<span class="token operator">*</span><span class="token operator">&amp;</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> adjvex<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span><span class="token punctuation">{</span>g <span class="token operator">=</span> <span class="token punctuation">(</span>GraphEdge<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GraphEdge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token operator">-></span>adjvex <span class="token operator">=</span> adjvex<span class="token punctuation">;</span>g<span class="token operator">-></span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>g<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接表存储有向图</span>GraphManager <span class="token function">createDirectedGraphList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> weight<span class="token punctuation">;</span>GraphEdge<span class="token operator">*</span> edge<span class="token punctuation">;</span>GraphManager g<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请分别输入顶点数和边数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>numVertex<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>numEdge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为顶点赋值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请依次输入顶点的符号 : \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>numVertex<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输入邻接表顶点信息</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将邻接表的第一个边节点置空</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为边节点赋值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>numEdge<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请分别输入两个相邻的节点和权值 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">makeGraphEdge</span><span class="token punctuation">(</span>edge<span class="token punctuation">,</span> j<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 制造一个边节点</span>edge<span class="token operator">-></span>next <span class="token operator">=</span> g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> edge<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接表存储无向图</span>GraphManager <span class="token function">createUnDirectedGraphList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> weight<span class="token punctuation">;</span>GraphEdge<span class="token operator">*</span> edge<span class="token punctuation">;</span>GraphManager g<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请分别输入顶点数和边数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>numVertex<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>numEdge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为顶点赋值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请依次输入顶点的符号 : \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>numVertex<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输入邻接表顶点信息</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将邻接表的第一个边节点置空</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为边节点赋值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>numEdge<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请分别输入两个相邻的节点和权值 : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>j<span class="token punctuation">,</span> <span class="token operator">&amp;</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">makeGraphEdge</span><span class="token punctuation">(</span>edge<span class="token punctuation">,</span> j<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 制造一个边节点</span>edge<span class="token operator">-></span>next <span class="token operator">=</span> g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> edge<span class="token punctuation">;</span><span class="token function">makeGraphEdge</span><span class="token punctuation">(</span>edge<span class="token punctuation">,</span> i<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>edge<span class="token operator">-></span>next <span class="token operator">=</span> g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>g<span class="token punctuation">.</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> edge<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> g<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接矩阵的深度优先递归算法</span><span class="token keyword">void</span> <span class="token function">MGraphDFS</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">MGraphDFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">MGraphDFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">MGraphDFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接表的深度优先递归算法</span><span class="token keyword">void</span> <span class="token function">GraphListDFS</span><span class="token punctuation">(</span>GraphManager G<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>GraphEdge<span class="token operator">*</span> tmp<span class="token punctuation">;</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>tmp<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">GraphListDFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> tmp<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">GraphListDFSTraverse</span><span class="token punctuation">(</span>GraphManager G<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">GraphListDFS</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接矩阵广度优先遍历算法</span><span class="token keyword">void</span> <span class="token function">MGraphBFSTraverse</span><span class="token punctuation">(</span>MGraph G<span class="token punctuation">)</span><span class="token punctuation">{</span>Queue q<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>G<span class="token punctuation">.</span>map<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>vexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 邻接表广度优先遍历算法</span><span class="token keyword">void</span> <span class="token function">GraphListBFSTraverse</span><span class="token punctuation">(</span>GraphManager G<span class="token punctuation">)</span><span class="token punctuation">{</span>GraphEdge<span class="token operator">*</span> p<span class="token punctuation">;</span>Queue q<span class="token punctuation">;</span><span class="token keyword">int</span> k<span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">DeQueue</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>visited<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">EnQueue</span><span class="token punctuation">(</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>p<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 遍历邻接表</span><span class="token keyword">void</span> <span class="token function">PrintGraphList</span><span class="token punctuation">(</span>GraphManager G<span class="token punctuation">)</span><span class="token punctuation">{</span>GraphEdge<span class="token operator">*</span> tmp<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>numVertex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c : "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c|%d  "</span><span class="token punctuation">,</span> G<span class="token punctuation">.</span>v<span class="token punctuation">[</span>tmp<span class="token operator">-></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> tmp<span class="token operator">-></span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 无向图邻接矩阵</span><span class="token comment" spellcheck="true">//MGraph gra;</span><span class="token comment" spellcheck="true">//createUnDirectedMGraph(gra);</span><span class="token comment" spellcheck="true">//printConnectedGraph(gra);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n深度优先遍历 : ");</span><span class="token comment" spellcheck="true">//MGraphDFSTraverse(gra);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n广度优先遍历 : ");</span><span class="token comment" spellcheck="true">//MGraphBFSTraverse(gra);</span><span class="token comment" spellcheck="true">// 有向图邻接矩阵</span><span class="token comment" spellcheck="true">//MGraph gra;</span><span class="token comment" spellcheck="true">//createDirectedMGraph(gra);</span><span class="token comment" spellcheck="true">//printConnectedGraph(gra);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n深度优先遍历 : ");</span><span class="token comment" spellcheck="true">//MGraphDFSTraverse(gra);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n广度优先遍历 : ");</span><span class="token comment" spellcheck="true">//MGraphBFSTraverse(gra);</span><span class="token comment" spellcheck="true">// 无向邻接表</span><span class="token comment" spellcheck="true">//GraphManager g = createUnDirectedGraphList();</span><span class="token comment" spellcheck="true">//PrintGraphList(g);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n深度优先遍历 : ");</span><span class="token comment" spellcheck="true">//GraphListDFSTraverse(g);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n深度优先遍历 : ");</span><span class="token comment" spellcheck="true">//GraphListBFSTraverse(g);</span><span class="token comment" spellcheck="true">// 有向邻接表</span><span class="token comment" spellcheck="true">//GraphManager g = createDirectedGraphList();</span><span class="token comment" spellcheck="true">//PrintGraphList(g);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n深度优先遍历 : ");</span><span class="token comment" spellcheck="true">//GraphListDFSTraverse(g);</span><span class="token comment" spellcheck="true">//printf("-------------------------------\n深度优先遍历 : ");</span><span class="token comment" spellcheck="true">//GraphListBFSTraverse(g);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>以该图为例<br><br><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211164608.png"></p><h3 id="无向图邻接矩阵"><a href="#无向图邻接矩阵" class="headerlink" title="无向图邻接矩阵"></a>无向图邻接矩阵</h3><p><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211165002.png"></p><h3 id="有向图邻接矩阵"><a href="#有向图邻接矩阵" class="headerlink" title="有向图邻接矩阵"></a>有向图邻接矩阵</h3><p><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211170602.png"></p><h3 id="无向图邻接表"><a href="#无向图邻接表" class="headerlink" title="无向图邻接表"></a>无向图邻接表</h3><p><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211170713.png"></p><h3 id="有向图邻接表"><a href="#有向图邻接表" class="headerlink" title="有向图邻接表"></a>有向图邻接表</h3><p><img src="https://mata-1305418743.cos.ap-nanjing.myqcloud.com/20211211170757.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/08/hello-world/"/>
      <url>/2021/12/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
